import datetime

# Base class for Library items
class LibraryItem:
    def __init__(self, title, author, category):
        self.title = title
        self.author = author
        self.category = category
        self.is_checked_out = False
        self.due_date = None

    def checkout(self):
        self.is_checked_out = True
        self.due_date = datetime.datetime.now() + datetime.timedelta(days=14)  # 2 weeks due date

    def return_item(self):
        self.is_checked_out = False
        self.due_date = None

    def is_overdue(self):
        if self.is_checked_out and datetime.datetime.now() > self.due_date:
            return True
        return False

    def overdue_days(self):
        if self.is_overdue():
            return (datetime.datetime.now() - self.due_date).days
        return 0

# Book class inheriting from LibraryItem
class Book(LibraryItem):
    def __init__(self, title, author, category, isbn):
        super().__init__(title, author, category)
        self.isbn = isbn

# Magazine class inheriting from LibraryItem
class Magazine(LibraryItem):
    def __init__(self, title, author, category, issue_number):
        super().__init__(title, author, category)
        self.issue_number = issue_number

# DVD class inheriting from LibraryItem
class DVD(LibraryItem):
    def __init__(self, title, author, category, region_code):
        super().__init__(title, author, category)
        self.region_code = region_code

# Library class to manage library items
class Library:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def checkout_item(self, title):
        for item in self.items:
            if item.title == title and not item.is_checked_out:
                item.checkout()
                print(f"{title} has been checked out. It is due in 14 days.")
                return
        print(f"Item '{title}' is either not available or already checked out.")

    def return_item(self, title):
        for item in self.items:
            if item.title == title and item.is_checked_out:
                overdue_days = item.overdue_days()
                fine = overdue_days * 1  # Fine of $1 per overdue day
                item.return_item()
                if overdue_days > 0:
                    print(f"Item '{title}' returned. You have an overdue fine of ${fine}.")
                else:
                    print(f"Item '{title}' returned. No overdue fine.")
                return
        print(f"Item '{title}' was not checked out or does not exist.")

    def search_item(self, title=None, author=None, category=None):
        found_items = []
        for item in self.items:
            if (title and title.lower() in item.title.lower()) or \
               (author and author.lower() in item.author.lower()) or \
               (category and category.lower() in item.category.lower()):
                found_items.append(item)
        if found_items:
            for item in found_items:
                print(f"Title: {item.title}, Author: {item.author}, Category: {item.category}")
        else:
            print("No matching items found.")

# User interface to interact with the library system
def library_system():
    library = Library()

    # Add some sample items to the library
    library.add_item(Book("The Great Gatsby", "F. Scott Fitzgerald", "Fiction", "9780743273565"))
    library.add_item(Magazine("National Geographic", "Various Authors", "Science", "2024-01"))
    library.add_item(DVD("Inception", "Christopher Nolan", "Sci-Fi", "Region 1"))

    while True:
        print("\nLibrary Management System")
        print("1. Add Item")
        print("2. Checkout Item")
        print("3. Return Item")
        print("4. Search Item")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            item_type = input("Enter item type (book/magazine/dvd): ").lower()
            title = input("Enter title: ")
            author = input("Enter author: ")
            category = input("Enter category: ")
            
            if item_type == 'book':
                isbn = input("Enter ISBN: ")
                library.add_item(Book(title, author, category, isbn))
            elif item_type == 'magazine':
                issue_number = input("Enter issue number: ")
                library.add_item(Magazine(title, author, category, issue_number))
            elif item_type == 'dvd':
                region_code = input("Enter region code: ")
                library.add_item(DVD(title, author, category, region_code))
            else:
                print("Invalid item type!")

        elif choice == '2':
            title = input("Enter the title of the item to checkout: ")
            library.checkout_item(title)

        elif choice == '3':
            title = input("Enter the title of the item to return: ")
            library.return_item(title)

        elif choice == '4':
            search_type = input("Search by title, author, or category? ").lower()
            if search_type == 'title':
                title = input("Enter the title: ")
                library.search_item(title=title)
            elif search_type == 'author':
                author = input("Enter the author: ")
                library.search_item(author=author)
            elif search_type == 'category':
                category = input("Enter the category: ")
                library.search_item(category=category)
            else:
                print("Invalid search type.")

        elif choice == '5':
            print("Exiting system.")
            break
        else:
            print("Invalid choice! Please try again.")

# Running the system
library_system()
